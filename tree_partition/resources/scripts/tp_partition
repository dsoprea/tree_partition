#!/usr/bin/env python3

import os
import argparse
import logging
import fnmatch

import tree_partition.utility

_DESCRIPTION = \
    "Write a partitioned set of links into a target path representing files " \
    "in the source path."

_LOGGER = logging.getLogger(__name__)


def _get_args():
    parser = \
        argparse.ArgumentParser(
            description=_DESCRIPTION)

    tree_partition.utility.register_common_parameters(parser)

    parser.add_argument(
        'source_path',
        help="Source path")

    parser.add_argument(
        'target_path',
        help="Target path")

    parser.add_argument(
        'n',
        type=int,
        help="Number of partitions")

    parser.add_argument(
        '--include',
        dest='includes',
        action='append',
        default=[],
        metavar='PATTERN',
        help="Only consider files that match the pattern")

    parser.add_argument(
        '--relative-prefix',
        help="Make links relative to the target path and add this prefix")

    args = parser.parse_args()
    return args

def _main():
    args = _get_args()


    tree_partition.utility.configure_logging(args)


    assert \
        os.path.isdir(args.source_path) is True, \
        "Source must be a directory."

    assert \
        os.path.exists(args.target_path) is False or \
            os.path.isdir(args.target_path) is True, \
        "Target must be a directory."


    def predicate(rel_filepath):
        if not args.includes:
            return True

        filename = os.path.basename(rel_filepath)

        for pattern in args.includes:

            if fnmatch.fnmatch(filename, pattern) is True:
                return True

            return False


    counts = \
        tree_partition.utility.partition_and_link(
            args.source_path,
            args.n,
            args.target_path,
            predicate=predicate,
            relative_prefix=args.relative_prefix)


    print(tree_partition.utility.get_pretty_json(counts))
    print('')


_main()
